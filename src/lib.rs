/*!

# Denops Rust Example

## About

Read this [article](https://zenn.dev/kkiyama117/articles/2021-03-01-denops-rust) also.

generated by [rustwasm/wasm-pack-template](https://github.com/rustwasm/wasm-pack-template)

## Todo

- [x] Build wasm from Rust and run on denops platform
- [ ] Add type and trait wrapping `denops-deno` and `denops-deno-std`

## 🛠️ Build

### Depends on

- sed command
- wasm-pack(you can get it by `cargo install wasm-pack`)

### Build

```bash
  # run wasm-pack and fix something to run by deno
  cargo run --manifest-path=utils/denops-builder/Cargo.toml
```

## LICENSE

This program is dual licensed by MIT and apache because of its dependencies.
See each licence also. ([`LICENSE_MIT`](https://github.com/kkiyama117/denops-rust-example/blob/main/LICENSE_MIT) and [`LICENSE_APACHE`](https://github.com/kkiyama117/denops-rust-example/blob/main/LICENSE_APACHE))

## Relations

- https://github.com/vim-denops/denops-deno
- https://github.com/vim-denops/denops-std-deno

## Info

- https://github.com/rustwasm/wasm-pack/issues/672

*/
use wasm_bindgen::prelude::*;
use denops_rust::std::*;

#[wasm_bindgen(start)]
pub fn initialize() -> Result<(), JsValue> {
    // When the `console_error_panic_hook` feature is enabled, we can call the
    // `set_panic_hook` function at least once during initialization, and then
    // we will get better error messages if our code ever panics.
    //
    // For more details see
    // https://github.com/rustwasm/console_error_panic_hook#readme
    #[cfg(debug_assertions)]
        console_error_panic_hook::set_once();

    Ok(())
}

#[wasm_bindgen]
pub async fn greet2() -> JsValue {
    JsValue::from_str(&format!("{}", "Hello, denops-rust-example!"))
}

#[wasm_bindgen]
pub async fn vim_test(test: Vim) -> Vim {
    // console::log(JsValue::from(&test));
    test
}