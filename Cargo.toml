[package]
name = "denops-rust"
version = "0.1.0"
authors = ["kkiyama117 <k.kiyama117@gmail.com>"]
edition = "2018"
categories = ["parser-implementations", "parsing"]
description = "Sample of denops plugin implemented by rust"
homepage = "https://github.com/kkiyama117/denops-rust-example"
keywords = ["vim", "deno", "denops"]
license = "MIT"
repository = "https://github.com/kkiyama117/denops-rust-example"

[lib]
crate-type = ["cdylib", "rlib"]

[features]
default = ["full"]
minimal-wasm= ["wee_alloc"]
full = []

[dependencies]

[target.'cfg(target_arch = "wasm32")'.dependencies]
# wasm-bindgen = { version = "0.2.63", features = ["serde-serialize"] }
wasm-bindgen = "0.2.63"
wasm-bindgen-futures = "0.4.21"
js-sys = "0.3.48"

# The `console_error_panic_hook` crate provides better debugging of panics by
# logging them with `console.error`. This is great for development, but requires
# all the `std::fmt` and `std::panicking` infrastructure, so isn't great for
# code size when deploying.
console_error_panic_hook = { version = "0.1.6" }

# `wee_alloc` is a tiny allocator for wasm that is only ~1K in code size
# compared to the default allocator's ~10K. It is slower than the default
# allocator, however.
#
# Unfortunately, `wee_alloc` requires nightly Rust when targeting wasm for now.
wee_alloc = { version = "0.4.5", optional = true }

[dev-dependencies]
wasm-bindgen-test = "0.3.21"

[profile.release]
# Tell `rustc` to optimize for small code size.
opt-level = "s"
codegen-units = 1
lto = true
