[package]
name = "denops-rust-example"
version = "0.3.1"
authors = ["kkiyama117 <k.kiyama117@gmail.com>"]
edition = "2018"
categories = ["parser-implementations", "parsing"]
description = "Sample of denops plugin implemented by rust"
homepage = "https://github.com/kkiyama117/denops-rust-example"
keywords = ["vim", "deno", "denops"]
license = "MIT/Apache-2.0"
repository = "https://github.com/kkiyama117/denops-rust-example"

[lib]
crate-type = ["cdylib", "rlib"]

[dependencies]

[target.'cfg(target_arch = "wasm32")'.dependencies]
wasm-bindgen = "0.2.71"
wasm-bindgen-futures = "0.4.21"
js-sys = "0.3.48"
denops-rust = { version = "0.2.1" }

[target.'cfg(target_arch = "wasm32")'.dependencies.web-sys]
version = "0.3.4"
features = [
    'Response',
]

# The `console_error_panic_hook` crate provides better debugging of panics by
# logging them with `console.error`. This is great for development, but requires
# all the `std::fmt` and `std::panicking` infrastructure, so isn't great for
# code size when deploying.
console_error_panic_hook = { version = "0.1.6" }

[dev-dependencies]
wasm-bindgen-test = "0.3.21"

[profile.release]
# Tell `rustc` to optimize for small code size.
opt-level = "s"
codegen-units = 1
lto = true

[profile.bench]
# Tell `rustc` to optimize for small code size.
opt-level = "s"
codegen-units = 1
lto = true
